name: prod cd

on:
  # only manually
  workflow_dispatch:

jobs:
  deploy_backend_prod:
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Hub
      run: |
        docker login \
        -u liveask \
        -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Publish Docker image
      run: |
        docker pull liveask/server:beta
        docker tag liveask/server:beta liveask/server:prod
        docker push liveask/server:prod
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_KEY_SECRET }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        ECS_CLUSTER: la-ecs-cluster-prod
      run: |
        aws sts get-caller-identity
        ECS_SERVICE_ARN=$(aws ecs list-services --region=${AWS_DEFAULT_REGION} --cluster=${ECS_CLUSTER} --output=text | head -1 | awk '{print $2}')
        aws ecs update-service --region=${AWS_DEFAULT_REGION} --service=${ECS_SERVICE_ARN} --cluster=${ECS_CLUSTER} --force-new-deployment

  deploy_frontend_prod:
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - uses: actions/checkout@v2
    - name: Restore cargo cache
      uses: actions/cache@v2
      env:
        cache-name: ci
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: linux-${{ env.cache-name }}-stable-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        default: true
        profile: minimal
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Install Trunk
      run: |
        wget -qO- https://github.com/thedodd/trunk/releases/download/v0.16.0/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
        mv trunk /usr/local/bin/trunk
    - name: Build
      env:
        LA_ENV: "prod"
      run: |
        cd frontend
        #TODO: un-dupe once we have a better solution to change FE configs
        cargo make cargo-check
        cargo make build-and-check
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_KEY_SECRET }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        cd frontend/dist
        aws s3 sync . s3://www.live-ask.com --no-progress --delete --cache-control "public, max-age=5184000" --exclude index.html
        aws s3 cp ./index.html s3://www.live-ask.com --no-progress --cache-control "public, max-age=21600"
        aws cloudfront create-invalidation --distribution-id E3VSL6KHSMRDI2 --paths /index.html